{"mappings":"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","sources":["src/index.js","src/utils.js","src/getFilesToRemove.js","src/removeFiles.js","src/opsLimiter.js"],"sourcesContent":["const path = require('path');\n\nconst { Reporter } = require('@parcel/plugin');\n\nconst utils = require('./utils');\nconst getFilesToRemove = require('./getFilesToRemove');\nconst removeFiles = require('./removeFiles');\nconst opsLimiter = require('./opsLimiter')();\n\nconst normalizePath = p => p.split(path.sep).join(path.posix.sep);\n\nconst removeFileReporter = new Reporter({\n  async report({ event, options }) {\n    if (event.type === 'buildSuccess') {\n      const bundles = event.bundleGraph.getBundles();\n      const distPaths = [];\n      const filesToExclude = [];\n\n      bundles.forEach(b => { // excluding files of the current build from removal\n        const distPath = b.target && b.target.distDir ? normalizePath(b.target.distDir) : null;\n\n        if (utils.isString(distPath) && !distPaths.includes(distPath)) {\n          distPaths.push(distPath);\n        }\n\n        const filePath = normalizePath(b.filePath);\n\n        if (!filesToExclude.includes(filePath)) {\n          filesToExclude.push(filePath);\n          // excluding .map files as well\n          if (['.js', '.css'].includes(path.extname(filePath))) {\n            filesToExclude.push(`${filePath}.map`);\n          }\n        }\n      });\n\n      const projectPath = normalizePath(options.projectRoot);\n      const filesToRemove = await getFilesToRemove(projectPath, distPaths, filesToExclude);\n\n      if (!utils.isArray(filesToRemove)) return; // if no files to remove, there is nothing to do for us\n\n      filesToRemove.forEach(fileToRemove => { // dividing remove files operations by groups\n        const cleanDistFile = () => removeFiles(fileToRemove);\n        opsLimiter.queue.push(cleanDistFile);\n      });\n\n      await opsLimiter.exec(); // executing operations by chunks\n    }\n  },\n});\n\nmodule.exports = removeFileReporter;\n","const utils = {};\n\nutils.await = promise => promise.then(data => [null, data]).catch(err => [err]);\n\nutils.isArray = Array.isArray;\nutils.isNumber = obj => typeof obj === 'number' && Number.isFinite(obj);\nutils.isString = str => typeof str === 'string';\nutils.isPlainObject = obj => typeof obj === 'object' && obj !== null && obj.toString() === '[object Object]';\n\nutils.isEmpty = obj => {\n  if (utils.isNumber(obj)) return false;\n  if (utils.isArray(obj)) return !obj.length;\n  if (utils.isPlainObject(obj)) return !Object.keys(obj).length;\n  if (utils.isString(obj)) return !obj.length;\n  return true;\n};\n\nmodule.exports = utils;\n","const fs = require('fs/promises');\nconst path = require('path');\n\nconst glob = require('fast-glob');\n\nconst utils = require('./utils');\n\nconst rootPath = process.cwd().split(path.sep).join(path.posix.sep);\n\n/**\n * Parses file paths for removal.\n * @param {String} projectPath root directory of the project\n * @param {String[]} distPaths unique dist paths of the current build\n * @param {String[]} filesToExclude dist files of the current bundle\n * @returns {Promise<String[]>} file paths to remove\n */\n\nconst getFilesToRemove = async (projectPath, distPaths, filesToExclude = []) => {\n  const packageJson = JSON.parse(await fs.readFile(path.posix.join(projectPath, 'package.json')));\n  const cleanDistFiles = [];\n\n  if (utils.isArray(packageJson.cleanDistFiles) && packageJson.cleanDistFiles.length) {\n    // files to be excluded should be processed first\n    const sortedFiles = packageJson.cleanDistFiles.sort(a => (a.startsWith('!') ? -1 : 1));\n    cleanDistFiles.push(...sortedFiles);\n  }\n\n  const filesToRemove = new Set([]);\n\n  /**\n   * Checks is path contains any of dist folders\n   * @param {String} p file path to be checked\n   * @returns {Boolean} boolean result of the check\n   */\n\n  const isFileInsideDist = p => distPaths.some(distPath => p.includes(distPath));\n\n  /**\n   * Checks is path should be excluded from removal(skipping path if matching exact path or parent folder)\n   * @param {String} filePath file path to be checked\n   * @returns {Boolean} boolean result of the check\n   */\n\n  const isFileExcluded = fp => (\n    filesToExclude.includes(fp) || filesToExclude.some(p => fp.includes(p) || p.includes(fp))\n  );\n\n  // when no config provided or configuration contains only files to exclude, we assume all other files must be removed\n  if (utils.isEmpty(cleanDistFiles) || cleanDistFiles.every(p => p.startsWith('!'))) {\n    const relativeDistPaths = distPaths.map(p => path.posix.normalize(`${p.replace(rootPath, '')}/**/*`));\n    cleanDistFiles.push(...relativeDistPaths);\n  }\n\n  for (const itemToRemove of cleanDistFiles) {\n    if (!utils.isString(itemToRemove)) continue; // eslint-disable-line no-continue\n\n    let filePath = path.posix.join(rootPath, itemToRemove);\n\n    if (glob.isDynamicPattern(itemToRemove)) {\n      let filesToBeExcluded = false;\n      const globResults = [];\n\n      if (itemToRemove.startsWith('!')) {\n        filesToBeExcluded = true;\n        filePath = filePath.replace('!', '');\n      }\n\n      for await (const finalPath of glob.stream(filePath, { onlyFiles: false })) { // eslint-disable-line no-await-in-loop\n        // excluding entity inside block list or file outside of dist folder\n        if (!isFileExcluded(finalPath) && isFileInsideDist(finalPath)) {\n          if (filesToBeExcluded) {\n            filesToExclude.push(finalPath);\n          } else {\n            globResults.push(finalPath);\n          }\n        }\n      }\n\n      globResults.forEach(finalPath => { // excluding files when whole dir matched to prevent dups\n        const dirAlreadyIncluded = globResults.some(p => (p !== finalPath && finalPath.includes(p)));\n\n        if (!dirAlreadyIncluded) {\n          filesToRemove.add(finalPath);\n\n          if (['.js', '.css'].includes(path.extname(finalPath))) { // most probably .map files should be removed as well\n            filesToRemove.add(`${finalPath}.map`);\n          }\n        }\n      });\n    } else if (isFileInsideDist(filePath)) {\n      filesToRemove.add(filePath);\n    }\n  }\n\n  return Array.from(filesToRemove);\n};\n\nmodule.exports = getFilesToRemove;\n","const fs = require('fs/promises');\nconst path = require('path');\n\nconst utils = require('./utils');\n\n/**\n * Remove of target directory/file.\n * @param {String} filePath directory of file path\n * @param {Boolean} isFile determine is it a file or not\n * @returns {Promise<void>}\n */\n\nconst rmFn = async (filePath, isFile = true) => {\n  if (!isFile) {\n    await fs.rmdir(filePath);\n    return;\n  }\n\n  await fs.unlink(filePath);\n};\n\nconst recursiveFilesRemoval = async targetPath => {\n  const [err, mainStats] = await utils.await(fs.stat(targetPath));\n  if (err) { // if a file/folder doesn't exist we just terminate this process at the beginning\n    if (err.code !== 'ENOENT') { // if an error is related to a different code, then it worth throwing it\n      throw err;\n    }\n\n    return;\n  }\n\n  if (mainStats.isFile()) { // if target is a file\n    await rmFn(targetPath);\n    return;\n  }\n\n  const fileNames = await fs.readdir(targetPath);\n\n  await Promise.all(fileNames.map(async fileName => { // removing all files inside the target dir\n    const filePath = path.posix.join(targetPath, fileName);\n    const stats = await fs.stat(filePath);\n\n    if (stats.isDirectory()) {\n      await recursiveFilesRemoval(filePath);\n      return;\n    }\n\n    await rmFn(filePath);\n  }));\n\n  await rmFn(targetPath, false); // after all files removed, we finally purge the target dir\n};\n\n/**\n * Recursively removes all folders & files on specified path.\n * @param {String} _targetPath root directory/file to start from\n * @returns {Promise<void>}\n */\n\nconst removeFiles = _targetPath => {\n  const targetPath = path.posix.normalize(_targetPath);\n  return recursiveFilesRemoval(targetPath);\n};\n\nmodule.exports = removeFiles;\n","module.exports = () => ({\n  queue: [],\n  async exec(limit = 5) {\n    const currentOps = this.queue.splice(0, limit);\n\n    await Promise.all(currentOps.map(op => op()));\n\n    if (this.queue.length <= 0) return;\n\n    await this.exec(limit);\n  },\n});\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}